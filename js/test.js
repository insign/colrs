// koffee 0.56.0

/*
000000000  00000000   0000000  000000000
   000     000       000          000   
   000     0000000   0000000      000   
   000     000            000     000   
   000     00000000  0000000      000
 */
var _, chai, cls, kstr, ls, ref, slash;

ref = require('kxk'), chai = ref.chai, slash = ref.slash, kstr = ref.kstr, _ = ref._;

chai();

ls = require('../');

cls = function() {
    var lines, raw, stripped, trimmed;
    raw = ls.apply(ls, arguments);
    stripped = kstr.stripAnsi(raw);
    lines = stripped.split('\n');
    trimmed = lines.map(function(s) {
        return s.trim();
    });
    trimmed.lines = lines;
    trimmed.clrzd = raw.split('\n');
    return trimmed;
};

describe('ls', function() {
    it('module', function() {
        return ls.should.be.an('function');
    });
    it('ls', function() {
        var out;
        out = cls();
        out.should.include('js');
        out.should.include('bin');
        out.should.include('coffee');
        out.should.include('node_modules');
        out.should.include('package.noon');
        out.should.include('package.json');
        return out.should.include('README.md');
    });
    it('ls .', function() {
        var out;
        out = cls('.');
        out.should.include('js');
        out.should.include('bin');
        out.should.include('coffee');
        out.should.include('node_modules');
        out.should.include('package.noon');
        out.should.include('package.json');
        return out.should.include('README.md');
    });
    it('ls bin', function() {
        var out;
        out = cls('./bin');
        out.should.include('img');
        out.should.include('test');
        return out.should.include('color-ls');
    });
    it('cd bin/test and ls .', function() {
        var out;
        process.chdir('./bin/test');
        out = cls('.');
        return out.should.include('Makefile');
    });
    it('offset', function() {
        var out;
        out = cls('.', {
            offset: true
        });
        out.lines.should.include('        Makefile');
        return out.lines.should.include('        coffee.coffee');
    });
    it('tree', function() {
        var out;
        out = cls('a', {
            tree: true,
            depth: 99
        });
        out[1].should.include('a');
        out[2].should.include('a.b.c');
        out[3].should.include('a.txt');
        out[4].should.include('txt.txt');
        out[5].should.include('b');
        return out[6].should.include('b.lnk ► b.txt');
    });
    return it('recursive', function() {
        var out;
        out = cls('a', {
            recurse: true,
            depth: 99
        });
        out[1].should.include('▶ a');
        out[3].should.include('b');
        out[4].should.include('a.b.c');
        out[5].should.include('a.txt');
        out[6].should.include('txt.txt');
        out[8].should.include('▶ a/b');
        out[10].should.include('c');
        return out[11].should.include('b.lnk ► b.txt');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBUUEsTUFBMkIsT0FBQSxDQUFRLEtBQVIsQ0FBM0IsRUFBRSxlQUFGLEVBQVEsaUJBQVIsRUFBZSxlQUFmLEVBQXFCOztBQUVyQixJQUFBLENBQUE7O0FBRUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxLQUFSOztBQUVMLEdBQUEsR0FBTSxTQUFBO0FBRUYsUUFBQTtJQUFBLEdBQUEsR0FBTSxFQUFFLENBQUMsS0FBSCxDQUFTLEVBQVQsRUFBYSxTQUFiO0lBQ04sUUFBQSxHQUFXLElBQUksQ0FBQyxTQUFMLENBQWUsR0FBZjtJQUNYLEtBQUEsR0FBUSxRQUFRLENBQUMsS0FBVCxDQUFlLElBQWY7SUFDUixPQUFBLEdBQVUsS0FBSyxDQUFDLEdBQU4sQ0FBVSxTQUFDLENBQUQ7ZUFBTyxDQUFDLENBQUMsSUFBRixDQUFBO0lBQVAsQ0FBVjtJQUNWLE9BQU8sQ0FBQyxLQUFSLEdBQWdCO0lBQ2hCLE9BQU8sQ0FBQyxLQUFSLEdBQWdCLEdBQUcsQ0FBQyxLQUFKLENBQVUsSUFBVjtXQUNoQjtBQVJFOztBQVVOLFFBQUEsQ0FBUyxJQUFULEVBQWMsU0FBQTtJQUVWLEVBQUEsQ0FBRyxRQUFILEVBQVksU0FBQTtlQUVSLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQWIsQ0FBZ0IsVUFBaEI7SUFGUSxDQUFaO0lBSUEsRUFBQSxDQUFHLElBQUgsRUFBUSxTQUFBO0FBRUosWUFBQTtRQUFBLEdBQUEsR0FBTSxHQUFBLENBQUE7UUFDTixHQUFHLENBQUMsTUFBTSxDQUFDLE9BQVgsQ0FBbUIsSUFBbkI7UUFDQSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQVgsQ0FBbUIsS0FBbkI7UUFDQSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQVgsQ0FBbUIsUUFBbkI7UUFDQSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQVgsQ0FBbUIsY0FBbkI7UUFDQSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQVgsQ0FBbUIsY0FBbkI7UUFDQSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQVgsQ0FBbUIsY0FBbkI7ZUFDQSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQVgsQ0FBbUIsV0FBbkI7SUFUSSxDQUFSO0lBV0EsRUFBQSxDQUFHLE1BQUgsRUFBVSxTQUFBO0FBRU4sWUFBQTtRQUFBLEdBQUEsR0FBTSxHQUFBLENBQUksR0FBSjtRQUNOLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBWCxDQUFtQixJQUFuQjtRQUNBLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBWCxDQUFtQixLQUFuQjtRQUNBLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBWCxDQUFtQixRQUFuQjtRQUNBLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBWCxDQUFtQixjQUFuQjtRQUNBLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBWCxDQUFtQixjQUFuQjtRQUNBLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBWCxDQUFtQixjQUFuQjtlQUNBLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBWCxDQUFtQixXQUFuQjtJQVRNLENBQVY7SUFXQSxFQUFBLENBQUcsUUFBSCxFQUFZLFNBQUE7QUFFUixZQUFBO1FBQUEsR0FBQSxHQUFNLEdBQUEsQ0FBSSxPQUFKO1FBQ04sR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFYLENBQW1CLEtBQW5CO1FBQ0EsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFYLENBQW1CLE1BQW5CO2VBQ0EsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFYLENBQW1CLFVBQW5CO0lBTFEsQ0FBWjtJQU9BLEVBQUEsQ0FBRyxzQkFBSCxFQUEwQixTQUFBO0FBRXRCLFlBQUE7UUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLFlBQWQ7UUFDQSxHQUFBLEdBQU0sR0FBQSxDQUFJLEdBQUo7ZUFDTixHQUFHLENBQUMsTUFBTSxDQUFDLE9BQVgsQ0FBbUIsVUFBbkI7SUFKc0IsQ0FBMUI7SUFNQSxFQUFBLENBQUcsUUFBSCxFQUFZLFNBQUE7QUFFUixZQUFBO1FBQUEsR0FBQSxHQUFNLEdBQUEsQ0FBSSxHQUFKLEVBQVM7WUFBQyxNQUFBLEVBQU8sSUFBUjtTQUFUO1FBQ04sR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBakIsQ0FBeUIsa0JBQXpCO2VBQ0EsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBakIsQ0FBeUIsdUJBQXpCO0lBSlEsQ0FBWjtJQU1BLEVBQUEsQ0FBRyxNQUFILEVBQVUsU0FBQTtBQUVOLFlBQUE7UUFBQSxHQUFBLEdBQU0sR0FBQSxDQUFJLEdBQUosRUFBUztZQUFDLElBQUEsRUFBSyxJQUFOO1lBQVksS0FBQSxFQUFNLEVBQWxCO1NBQVQ7UUFDTixHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsR0FBdEI7UUFDQSxHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsT0FBdEI7UUFDQSxHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsT0FBdEI7UUFDQSxHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsU0FBdEI7UUFDQSxHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsR0FBdEI7ZUFDQSxHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsZUFBdEI7SUFSTSxDQUFWO1dBVUEsRUFBQSxDQUFHLFdBQUgsRUFBZSxTQUFBO0FBRVgsWUFBQTtRQUFBLEdBQUEsR0FBTSxHQUFBLENBQUksR0FBSixFQUFTO1lBQUMsT0FBQSxFQUFRLElBQVQ7WUFBZSxLQUFBLEVBQU0sRUFBckI7U0FBVDtRQUNOLEdBQUksQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFNLENBQUMsT0FBZCxDQUFzQixLQUF0QjtRQUVBLEdBQUksQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFNLENBQUMsT0FBZCxDQUFzQixHQUF0QjtRQUNBLEdBQUksQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFNLENBQUMsT0FBZCxDQUFzQixPQUF0QjtRQUNBLEdBQUksQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFNLENBQUMsT0FBZCxDQUFzQixPQUF0QjtRQUNBLEdBQUksQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFNLENBQUMsT0FBZCxDQUFzQixTQUF0QjtRQUNBLEdBQUksQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFNLENBQUMsT0FBZCxDQUFzQixPQUF0QjtRQUVBLEdBQUksQ0FBQSxFQUFBLENBQUcsQ0FBQyxNQUFNLENBQUMsT0FBZixDQUF1QixHQUF2QjtlQUNBLEdBQUksQ0FBQSxFQUFBLENBQUcsQ0FBQyxNQUFNLENBQUMsT0FBZixDQUF1QixlQUF2QjtJQVpXLENBQWY7QUF6RFUsQ0FBZCIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwMFxuICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgIFxuICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgIFxuICAgMDAwICAgICAwMDAgICAgICAgICAgICAwMDAgICAgIDAwMCAgIFxuICAgMDAwICAgICAwMDAwMDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgIFxuIyMjXG5cbnsgY2hhaSwgc2xhc2gsIGtzdHIsIF8gfSA9IHJlcXVpcmUgJ2t4aydcblxuY2hhaSgpXG5cbmxzID0gcmVxdWlyZSAnLi4vJ1xuXG5jbHMgPSAtPiBcbiAgICBcbiAgICByYXcgPSBscy5hcHBseSBscywgYXJndW1lbnRzXG4gICAgc3RyaXBwZWQgPSBrc3RyLnN0cmlwQW5zaSByYXdcbiAgICBsaW5lcyA9IHN0cmlwcGVkLnNwbGl0ICdcXG4nXG4gICAgdHJpbW1lZCA9IGxpbmVzLm1hcCAocykgLT4gcy50cmltKClcbiAgICB0cmltbWVkLmxpbmVzID0gbGluZXNcbiAgICB0cmltbWVkLmNscnpkID0gcmF3LnNwbGl0ICdcXG4nXG4gICAgdHJpbW1lZFxuXG5kZXNjcmliZSAnbHMnIC0+XG4gICAgICAgICAgIFxuICAgIGl0ICdtb2R1bGUnIC0+XG4gICAgICAgIFxuICAgICAgICBscy5zaG91bGQuYmUuYW4gJ2Z1bmN0aW9uJ1xuICAgICAgICBcbiAgICBpdCAnbHMnIC0+XG4gICAgICAgIFxuICAgICAgICBvdXQgPSBjbHMoKVxuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ2pzJ1xuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ2JpbidcbiAgICAgICAgb3V0LnNob3VsZC5pbmNsdWRlICdjb2ZmZWUnXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnbm9kZV9tb2R1bGVzJ1xuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ3BhY2thZ2Uubm9vbidcbiAgICAgICAgb3V0LnNob3VsZC5pbmNsdWRlICdwYWNrYWdlLmpzb24nXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnUkVBRE1FLm1kJ1xuICAgICAgICBcbiAgICBpdCAnbHMgLicgLT5cbiAgICAgICAgXG4gICAgICAgIG91dCA9IGNscyAnLidcbiAgICAgICAgb3V0LnNob3VsZC5pbmNsdWRlICdqcydcbiAgICAgICAgb3V0LnNob3VsZC5pbmNsdWRlICdiaW4nXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnY29mZmVlJ1xuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ25vZGVfbW9kdWxlcydcbiAgICAgICAgb3V0LnNob3VsZC5pbmNsdWRlICdwYWNrYWdlLm5vb24nXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAncGFja2FnZS5qc29uJ1xuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ1JFQURNRS5tZCdcbiAgICAgICAgXG4gICAgaXQgJ2xzIGJpbicgLT5cbiAgICAgICAgXG4gICAgICAgIG91dCA9IGNscyAnLi9iaW4nXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnaW1nJ1xuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ3Rlc3QnXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnY29sb3ItbHMnXG5cbiAgICBpdCAnY2QgYmluL3Rlc3QgYW5kIGxzIC4nIC0+XG4gICAgICAgIFxuICAgICAgICBwcm9jZXNzLmNoZGlyICcuL2Jpbi90ZXN0J1xuICAgICAgICBvdXQgPSBjbHMgJy4nXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnTWFrZWZpbGUnXG4gICAgICAgIFxuICAgIGl0ICdvZmZzZXQnIC0+XG4gICAgICAgIFxuICAgICAgICBvdXQgPSBjbHMgJy4nLCB7b2Zmc2V0OnRydWV9XG4gICAgICAgIG91dC5saW5lcy5zaG91bGQuaW5jbHVkZSAnICAgICAgICBNYWtlZmlsZSdcbiAgICAgICAgb3V0LmxpbmVzLnNob3VsZC5pbmNsdWRlICcgICAgICAgIGNvZmZlZS5jb2ZmZWUnXG4gICAgXG4gICAgaXQgJ3RyZWUnIC0+ICMgdG9kbzogdGVzdCBkZXB0aFxuICAgICAgICBcbiAgICAgICAgb3V0ID0gY2xzICdhJywge3RyZWU6dHJ1ZSwgZGVwdGg6OTl9XG4gICAgICAgIG91dFsxXS5zaG91bGQuaW5jbHVkZSAnYSdcbiAgICAgICAgb3V0WzJdLnNob3VsZC5pbmNsdWRlICdhLmIuYydcbiAgICAgICAgb3V0WzNdLnNob3VsZC5pbmNsdWRlICdhLnR4dCdcbiAgICAgICAgb3V0WzRdLnNob3VsZC5pbmNsdWRlICd0eHQudHh0JyAgICAgICAgXG4gICAgICAgIG91dFs1XS5zaG91bGQuaW5jbHVkZSAnYidcbiAgICAgICAgb3V0WzZdLnNob3VsZC5pbmNsdWRlICdiLmxuayDilrogYi50eHQnXG4gICAgICAgIFxuICAgIGl0ICdyZWN1cnNpdmUnIC0+XG4gICAgICAgIFxuICAgICAgICBvdXQgPSBjbHMgJ2EnLCB7cmVjdXJzZTp0cnVlLCBkZXB0aDo5OX1cbiAgICAgICAgb3V0WzFdLnNob3VsZC5pbmNsdWRlICfilrYgYSdcbiAgICAgICAgXG4gICAgICAgIG91dFszXS5zaG91bGQuaW5jbHVkZSAnYidcbiAgICAgICAgb3V0WzRdLnNob3VsZC5pbmNsdWRlICdhLmIuYydcbiAgICAgICAgb3V0WzVdLnNob3VsZC5pbmNsdWRlICdhLnR4dCcgICAgICAgIFxuICAgICAgICBvdXRbNl0uc2hvdWxkLmluY2x1ZGUgJ3R4dC50eHQnICAgICAgICBcbiAgICAgICAgb3V0WzhdLnNob3VsZC5pbmNsdWRlICfilrYgYS9iJ1xuICAgICAgICBcbiAgICAgICAgb3V0WzEwXS5zaG91bGQuaW5jbHVkZSAnYydcbiAgICAgICAgb3V0WzExXS5zaG91bGQuaW5jbHVkZSAnYi5sbmsg4pa6IGIudHh0J1xuICAgICAgICBcbiAgICAgICAgIl19
//# sourceURL=../coffee/test.coffee