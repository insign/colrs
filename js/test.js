// koffee 0.56.0

/*
000000000  00000000   0000000  000000000
   000     000       000          000   
   000     0000000   0000000      000   
   000     000            000     000   
   000     00000000  0000000      000
 */
var chai, cls, kstr, ls, slash;

chai = require('chai');

slash = require('kslash');

kstr = require('kstr');

chai.should();

ls = require('../');

cls = function() {
    var lines, raw, stripped, trimmed;
    raw = ls.apply(ls, arguments);
    stripped = kstr.stripAnsi(raw);
    lines = stripped.split('\n');
    trimmed = lines.map(function(s) {
        return s.trim();
    });
    trimmed.lines = lines;
    trimmed.clrzd = raw.split('\n');
    return trimmed;
};

describe('ls', function() {
    it('module', function() {
        return ls.should.be.an('function');
    });
    it('ls', function() {
        var out;
        out = cls();
        out.should.include('js');
        out.should.include('bin');
        out.should.include('coffee');
        out.should.include('node_modules');
        out.should.include('package.noon');
        out.should.include('package.json');
        return out.should.include('README.md');
    });
    it('ls .', function() {
        var out;
        out = cls('.');
        out.should.include('js');
        out.should.include('bin');
        out.should.include('coffee');
        out.should.include('node_modules');
        out.should.include('package.noon');
        out.should.include('package.json');
        return out.should.include('README.md');
    });
    it('ls bin', function() {
        var out;
        out = cls('./bin');
        out.should.include('img');
        out.should.include('test');
        return out.should.include('color-ls');
    });
    it('cd bin/test and ls .', function() {
        var out;
        process.chdir('./bin/test');
        out = cls('.');
        return out.should.include('Makefile');
    });
    it('offset', function() {
        var out;
        out = cls('.', {
            offset: true
        });
        out.lines.should.include('        Makefile');
        return out.lines.should.include('        coffee.coffee');
    });
    it('tree', function() {
        var out;
        out = cls('a', {
            tree: true,
            depth: 99
        });
        out[1].should.include('a');
        out[2].should.include('a.b.c');
        out[3].should.include('a.txt');
        out[4].should.include('txt.txt');
        out[5].should.include('b');
        if (!slash.win()) {
            return out[6].should.include('b.lnk ► b.txt');
        }
    });
    return it('recursive', function() {
        var out;
        out = cls('a', {
            recurse: true,
            depth: 99
        });
        out[1].should.include('▶ a');
        out[3].should.include('b');
        out[4].should.include('a.b.c');
        out[5].should.include('a.txt');
        out[6].should.include('txt.txt');
        out[8].should.include('▶ a/b');
        out[10].should.include('c');
        if (!slash.win()) {
            return out[11].should.include('b.lnk ► b.txt');
        }
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBUUEsSUFBQSxHQUFRLE9BQUEsQ0FBUSxNQUFSOztBQUNSLEtBQUEsR0FBUSxPQUFBLENBQVEsUUFBUjs7QUFDUixJQUFBLEdBQVEsT0FBQSxDQUFRLE1BQVI7O0FBRVIsSUFBSSxDQUFDLE1BQUwsQ0FBQTs7QUFFQSxFQUFBLEdBQUssT0FBQSxDQUFRLEtBQVI7O0FBRUwsR0FBQSxHQUFNLFNBQUE7QUFFRixRQUFBO0lBQUEsR0FBQSxHQUFNLEVBQUUsQ0FBQyxLQUFILENBQVMsRUFBVCxFQUFhLFNBQWI7SUFDTixRQUFBLEdBQVcsSUFBSSxDQUFDLFNBQUwsQ0FBZSxHQUFmO0lBQ1gsS0FBQSxHQUFRLFFBQVEsQ0FBQyxLQUFULENBQWUsSUFBZjtJQUNSLE9BQUEsR0FBVSxLQUFLLENBQUMsR0FBTixDQUFVLFNBQUMsQ0FBRDtlQUFPLENBQUMsQ0FBQyxJQUFGLENBQUE7SUFBUCxDQUFWO0lBQ1YsT0FBTyxDQUFDLEtBQVIsR0FBZ0I7SUFDaEIsT0FBTyxDQUFDLEtBQVIsR0FBZ0IsR0FBRyxDQUFDLEtBQUosQ0FBVSxJQUFWO1dBQ2hCO0FBUkU7O0FBVU4sUUFBQSxDQUFTLElBQVQsRUFBYyxTQUFBO0lBRVYsRUFBQSxDQUFHLFFBQUgsRUFBWSxTQUFBO2VBRVIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBYixDQUFnQixVQUFoQjtJQUZRLENBQVo7SUFJQSxFQUFBLENBQUcsSUFBSCxFQUFRLFNBQUE7QUFFSixZQUFBO1FBQUEsR0FBQSxHQUFNLEdBQUEsQ0FBQTtRQUNOLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBWCxDQUFtQixJQUFuQjtRQUNBLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBWCxDQUFtQixLQUFuQjtRQUNBLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBWCxDQUFtQixRQUFu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LENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsS0FBdEI7UUFFQSxHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsR0FBdEI7UUFDQSxHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsT0FBdEI7UUFDQSxHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsT0FBdEI7UUFDQSxHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsU0FBdEI7UUFDQSxHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBTSxDQUFDLE9BQWQsQ0FBc0IsT0FBdEI7UUFFQSxHQUFJLENBQUEsRUFBQSxDQUFHLENBQUMsTUFBTSxDQUFDLE9BQWYsQ0FBdUIsR0FBdkI7UUFFQSxJQUFHLENBQUksS0FBSyxDQUFDLEdBQU4sQ0FBQSxDQUFQO21CQUNJLEdBQUksQ0FBQSxFQUFBLENBQUcsQ0FBQyxNQUFNLENBQUMsT0FBZixDQUF1QixlQUF2QixFQURKOztJQWJXLENBQWY7QUEzRFUsQ0FBZCIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwMFxuICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgIFxuICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgIFxuICAgMDAwICAgICAwMDAgICAgICAgICAgICAwMDAgICAgIDAwMCAgIFxuICAgMDAwICAgICAwMDAwMDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgIFxuIyMjXG5cbmNoYWkgID0gcmVxdWlyZSAnY2hhaSdcbnNsYXNoID0gcmVxdWlyZSAna3NsYXNoJ1xua3N0ciAgPSByZXF1aXJlICdrc3RyJ1xuXG5jaGFpLnNob3VsZCgpXG5cbmxzID0gcmVxdWlyZSAnLi4vJ1xuXG5jbHMgPSAtPiBcbiAgICBcbiAgICByYXcgPSBscy5hcHBseSBscywgYXJndW1lbnRzXG4gICAgc3RyaXBwZWQgPSBrc3RyLnN0cmlwQW5zaSByYXdcbiAgICBsaW5lcyA9IHN0cmlwcGVkLnNwbGl0ICdcXG4nXG4gICAgdHJpbW1lZCA9IGxpbmVzLm1hcCAocykgLT4gcy50cmltKClcbiAgICB0cmltbWVkLmxpbmVzID0gbGluZXNcbiAgICB0cmltbWVkLmNscnpkID0gcmF3LnNwbGl0ICdcXG4nXG4gICAgdHJpbW1lZFxuXG5kZXNjcmliZSAnbHMnIC0+XG4gICAgICAgICAgIFxuICAgIGl0ICdtb2R1bGUnIC0+XG4gICAgICAgIFxuICAgICAgICBscy5zaG91bGQuYmUuYW4gJ2Z1bmN0aW9uJ1xuICAgICAgICBcbiAgICBpdCAnbHMnIC0+XG4gICAgICAgIFxuICAgICAgICBvdXQgPSBjbHMoKVxuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ2pzJ1xuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ2JpbidcbiAgICAgICAgb3V0LnNob3VsZC5pbmNsdWRlICdjb2ZmZWUnXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnbm9kZV9tb2R1bGVzJ1xuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ3BhY2thZ2Uubm9vbidcbiAgICAgICAgb3V0LnNob3VsZC5pbmNsdWRlICdwYWNrYWdlLmpzb24nXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnUkVBRE1FLm1kJ1xuICAgICAgICBcbiAgICBpdCAnbHMgLicgLT5cbiAgICAgICAgXG4gICAgICAgIG91dCA9IGNscyAnLidcbiAgICAgICAgb3V0LnNob3VsZC5pbmNsdWRlICdqcydcbiAgICAgICAgb3V0LnNob3VsZC5pbmNsdWRlICdiaW4nXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnY29mZmVlJ1xuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ25vZGVfbW9kdWxlcydcbiAgICAgICAgb3V0LnNob3VsZC5pbmNsdWRlICdwYWNrYWdlLm5vb24nXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAncGFja2FnZS5qc29uJ1xuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ1JFQURNRS5tZCdcbiAgICAgICAgXG4gICAgaXQgJ2xzIGJpbicgLT5cbiAgICAgICAgXG4gICAgICAgIG91dCA9IGNscyAnLi9iaW4nXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnaW1nJ1xuICAgICAgICBvdXQuc2hvdWxkLmluY2x1ZGUgJ3Rlc3QnXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnY29sb3ItbHMnXG5cbiAgICBpdCAnY2QgYmluL3Rlc3QgYW5kIGxzIC4nIC0+XG4gICAgICAgIFxuICAgICAgICBwcm9jZXNzLmNoZGlyICcuL2Jpbi90ZXN0J1xuICAgICAgICBvdXQgPSBjbHMgJy4nXG4gICAgICAgIG91dC5zaG91bGQuaW5jbHVkZSAnTWFrZWZpbGUnXG4gICAgICAgIFxuICAgIGl0ICdvZmZzZXQnIC0+XG4gICAgICAgIFxuICAgICAgICBvdXQgPSBjbHMgJy4nLCB7b2Zmc2V0OnRydWV9XG4gICAgICAgIG91dC5saW5lcy5zaG91bGQuaW5jbHVkZSAnICAgICAgICBNYWtlZmlsZSdcbiAgICAgICAgb3V0LmxpbmVzLnNob3VsZC5pbmNsdWRlICcgICAgICAgIGNvZmZlZS5jb2ZmZWUnXG4gICAgXG4gICAgaXQgJ3RyZWUnIC0+ICMgdG9kbzogdGVzdCBkZXB0aFxuICAgICAgICBcbiAgICAgICAgb3V0ID0gY2xzICdhJywge3RyZWU6dHJ1ZSwgZGVwdGg6OTl9XG4gICAgICAgIG91dFsxXS5zaG91bGQuaW5jbHVkZSAnYSdcbiAgICAgICAgb3V0WzJdLnNob3VsZC5pbmNsdWRlICdhLmIuYydcbiAgICAgICAgb3V0WzNdLnNob3VsZC5pbmNsdWRlICdhLnR4dCdcbiAgICAgICAgb3V0WzRdLnNob3VsZC5pbmNsdWRlICd0eHQudHh0JyAgICAgICAgXG4gICAgICAgIG91dFs1XS5zaG91bGQuaW5jbHVkZSAnYidcbiAgICAgICAgXG4gICAgICAgIGlmIG5vdCBzbGFzaC53aW4oKVxuICAgICAgICAgICAgb3V0WzZdLnNob3VsZC5pbmNsdWRlICdiLmxuayDilrogYi50eHQnXG4gICAgICAgIFxuICAgIGl0ICdyZWN1cnNpdmUnIC0+XG4gICAgICAgIFxuICAgICAgICBvdXQgPSBjbHMgJ2EnLCB7cmVjdXJzZTp0cnVlLCBkZXB0aDo5OX1cbiAgICAgICAgb3V0WzFdLnNob3VsZC5pbmNsdWRlICfilrYgYSdcbiAgICAgICAgXG4gICAgICAgIG91dFszXS5zaG91bGQuaW5jbHVkZSAnYidcbiAgICAgICAgb3V0WzRdLnNob3VsZC5pbmNsdWRlICdhLmIuYydcbiAgICAgICAgb3V0WzVdLnNob3VsZC5pbmNsdWRlICdhLnR4dCcgICAgICAgIFxuICAgICAgICBvdXRbNl0uc2hvdWxkLmluY2x1ZGUgJ3R4dC50eHQnICAgICAgICBcbiAgICAgICAgb3V0WzhdLnNob3VsZC5pbmNsdWRlICfilrYgYS9iJ1xuICAgICAgICBcbiAgICAgICAgb3V0WzEwXS5zaG91bGQuaW5jbHVkZSAnYydcbiAgICAgICAgXG4gICAgICAgIGlmIG5vdCBzbGFzaC53aW4oKVxuICAgICAgICAgICAgb3V0WzExXS5zaG91bGQuaW5jbHVkZSAnYi5sbmsg4pa6IGIudHh0J1xuICAgICAgICBcbiAgICAgICAgIl19
//# sourceURL=../coffee/test.coffee